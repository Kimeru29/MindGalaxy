/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the GitHub repository of this plugin.
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  INBOX_FOLDER: () => INBOX_FOLDER,
  default: () => InboxOrganiser2
});
module.exports = __toCommonJS(src_exports);
var import_obsidian6 = require("obsidian");

// src/events.ts
var SETTINGS_UPDATED = "inbox-organiser:settings-updated";

// src/inbox.ts
var import_obsidian = require("obsidian");
var Inbox = class {
  constructor(vault, fileManager) {
    this.vault = vault;
    this.fileManager = fileManager;
  }
  getFiles() {
    const folder = this.vault.getFolderByPath(INBOX_FOLDER);
    if (!folder) {
      return [];
    }
    return folder.children.filter((child) => child instanceof import_obsidian.TFile).sort((a, b) => a.name.localeCompare(b.name));
  }
  getFolders() {
    const folders = this.vault.getAllFolders(false);
    return folders.filter((folder) => folder.path !== INBOX_FOLDER).sort((a, b) => a.name.localeCompare(b.name));
  }
  async move(file, path) {
    return this.fileManager.renameFile(file, `${path}/${file.name}`);
  }
};

// src/modal/index.ts
var import_obsidian3 = require("obsidian");

// src/modal/folder-suggest.ts
var import_obsidian2 = require("obsidian");
var FolderSuggest = class extends import_obsidian2.AbstractInputSuggest {
  constructor(app, folders, el) {
    super(app, el);
    this.folders = /* @__PURE__ */ new Set();
    this.el = el;
    folders.forEach((folder) => {
      this.folders.add(folder.path);
    });
  }
  getSuggestions(query) {
    query = query.toLocaleLowerCase();
    return [...this.folders].filter((path) => path.toLocaleLowerCase().contains(query));
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
  selectSuggestion(value, evt) {
    this.el.value = value;
    this.el.dispatchEvent(new Event("change"));
    this.close();
  }
};

// src/modal/index.ts
var CLS_PREFIX = "inorg-";
var OrganiserModal = class extends import_obsidian3.Modal {
  constructor(app, inbox) {
    super(app);
    this.inbox = inbox;
  }
  async onOpen() {
    this.getData();
    this.setTitle("Organise inbox");
    this.createLayout(this.contentEl);
  }
  getData() {
    this.files = this.inbox.getFiles();
    this.folders = this.inbox.getFolders();
  }
  createLayout(containerEl) {
    const mainContainerEl = containerEl.createDiv({ cls: `${CLS_PREFIX}container` });
    mainContainerEl.setAttribute("id", `${CLS_PREFIX}main`);
    this.fileRowEls = /* @__PURE__ */ new Map();
    this.fileRowSelectEls = /* @__PURE__ */ new Map();
    this.createFilter(mainContainerEl);
    this.createMultiSelect(mainContainerEl);
    this.createFileTable(mainContainerEl);
    this.createFileTableRows();
    this.handleSearch("");
    this.handleToggleSelectMulti(false);
  }
  createFilter(containerEl) {
    const searchContainerEl = containerEl.createDiv({ cls: `${CLS_PREFIX}search` });
    this.searchInputEl = searchContainerEl.createEl("input", { type: "search", placeholder: "Search..." });
    this.searchInputEl.spellcheck = false;
    this.searchInputEl.focus();
    this.searchInputEl.addEventListener("input", () => this.handleSearch(this.searchInputEl.value));
    searchContainerEl.createEl("div", { cls: "search-input-clear-button" }).addEventListener("click", () => {
      this.searchInputEl.value = "";
      this.searchInputEl.focus();
      this.handleSearch(this.searchInputEl.value);
    });
  }
  createMultiSelect(containerEl) {
    const topNavEl = containerEl.createDiv({ cls: `${CLS_PREFIX}top` });
    const topNavLeftEl = topNavEl.createDiv();
    const topNavRightEl = topNavEl.createDiv();
    const multiSelectLabelEl = topNavLeftEl.createEl("label", { cls: `${CLS_PREFIX}multiselect` });
    this.multiSelectToggleEl = multiSelectLabelEl.createEl("input", { type: "checkbox" });
    multiSelectLabelEl.createSpan({ text: "Select all/none " });
    this.multiSelectToggleEl.addEventListener("change", (event) => {
      const el = event.target;
      this.handleToggleSelectMulti(el.checked);
    });
    this.multiSelectFolderEl = this.createFolderSelect(topNavRightEl);
    this.multiSelectFolderEl.setAttribute("disabled", "disabled");
    this.multiSelectSaveEl = topNavRightEl.createEl("button", { cls: "mod-cta", text: "Move selected" });
    this.multiSelectSaveEl.setAttribute("disabled", "disabled");
    this.multiSelectSaveEl.addEventListener("click", () => {
      if (this.multiSelectFolderEl.value) {
        this.handleMoveMultipleFiles(this.multiSelectFolderEl.value);
      }
    });
  }
  createFileTable(containerEl) {
    const tableEl = containerEl.createDiv({ cls: `${CLS_PREFIX}files` }).createEl("table");
    const theadEl = tableEl.createEl("thead");
    const theadTrEl = theadEl.createEl("tr");
    theadTrEl.createEl("th");
    theadTrEl.createEl("th", { text: "Name" });
    theadTrEl.createEl("th", { text: "Move to..." });
    this.fileTbodyEl = tableEl.createEl("tbody");
  }
  createFileTableRows() {
    for (const file of this.files) {
      const fileTrEl = this.fileTbodyEl.createEl("tr");
      const selectTdEl = fileTrEl.createEl("td");
      const selectEl = selectTdEl.createEl("input", { type: "checkbox" });
      selectEl.addEventListener("change", (event) => {
        const el = event.target;
        this.handleToggleSelect(file.name, el.checked);
      });
      this.fileRowSelectEls.set(file.name, selectEl);
      const fileNameTd = fileTrEl.createEl("td", { text: file.name });
      fileNameTd.addEventListener("click", (event) => {
        selectEl.checked = !selectEl.checked;
        selectEl.dispatchEvent(new Event("change"));
        event.stopPropagation();
      });
      const moveTdEl = fileTrEl.createEl("td");
      const moveSelectEl = this.createFolderSelect(moveTdEl);
      moveSelectEl.addEventListener("change", (event) => {
        const el = event.target;
        this.handleMoveSingleFile(file.name, el.value);
      });
      this.fileRowEls.set(file.name, fileTrEl);
    }
  }
  createFolderSelect(containerEl) {
    const folderSelectEl = containerEl.createEl("input", { cls: `${CLS_PREFIX}dropdown` });
    new FolderSuggest(this.app, this.folders, folderSelectEl);
    return folderSelectEl;
  }
  handleSearch(query) {
    [...this.fileRowEls.entries()].forEach(([fileName, row]) => {
      const fileNameSearch = fileName.toLowerCase();
      if ((query === "" || fileNameSearch.contains(query)) && row.className.contains("hidden")) {
        row.className = "";
      } else if (!fileNameSearch.contains(query)) {
        if (row.className.contains("selected")) {
          this.handleToggleSelect(fileName, false);
        }
        row.className = "hidden";
      }
    });
  }
  handleToggleSelect(fileName, selected) {
    const rowEl = this.fileRowEls.get(fileName);
    const inputEl = this.fileRowSelectEls.get(fileName);
    if (rowEl && inputEl) {
      inputEl.checked = selected;
      rowEl.className = "";
      if (inputEl.checked) {
        rowEl.className = "selected";
      }
    }
    if ([...this.fileRowEls.values()].filter((row) => row.className === "selected").length) {
      this.multiSelectFolderEl.removeAttribute("disabled");
      this.multiSelectSaveEl.removeAttribute("disabled");
    } else {
      this.multiSelectFolderEl.setAttribute("disabled", "disabled");
      this.multiSelectSaveEl.setAttribute("disabled", "disabled");
    }
  }
  handleToggleSelectMulti(selected) {
    for (const fileName of this.files.map((file) => file.name)) {
      this.handleToggleSelect(fileName, selected);
    }
  }
  async handleMoveSingleFile(fileName, path) {
    const file = this.files.find((f) => f.name === fileName);
    if (file === void 0 || path === "") {
      return;
    }
    await this.inbox.move(file, path);
    this.files.remove(file);
    if (this.files.length === 0) {
      this.close();
    } else {
      this.fileTbodyEl.empty();
      this.createFileTableRows();
    }
  }
  async handleMoveMultipleFiles(path) {
    const moveActions = [];
    [...this.fileRowEls.entries()].filter(([fileName, row]) => row.className === "selected").forEach(([fileName, row]) => {
      moveActions.push(this.handleMoveSingleFile(fileName, path));
    });
    await Promise.all(moveActions);
    this.handleToggleSelectMulti(false);
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/notice.ts
var import_obsidian4 = require("obsidian");
var OrganiserNotice = class {
  constructor(plugin, modal, inbox, now) {
    this.plugin = plugin;
    this.modal = modal;
    this.inbox = inbox;
    this.now = now || (0, import_obsidian4.moment)();
  }
  getFragment() {
    const fragment = new DocumentFragment();
    fragment.createEl("span", { text: "This is a reminder to organise all the files within your inbox folder: click " });
    fragment.createEl("a", { text: "here" }).addEventListener("click", () => this.modal.open());
    fragment.createEl("span", { text: " to get started." });
    return fragment;
  }
  display() {
    const settings = this.plugin.getSettings();
    if (!settings.inbox || settings.period === "disabled") {
      return;
    }
    if (settings.period === "daily_9am" && !this.now.isBetween(this.now.clone().set({ hour: 9, minute: 0, second: 0 }), this.now.clone().set({ hour: 9, minute: 9, second: 59 }))) {
      return;
    }
    if (settings.period === "daily_11am" && !this.now.isBetween(this.now.clone().set({ hour: 11, minute: 0, second: 0 }), this.now.clone().set({ hour: 11, minute: 9, second: 59 }))) {
      return;
    }
    if (settings.period === "daily_3pm" && !this.now.isBetween(this.now.clone().set({ hour: 15, minute: 0, second: 0 }), this.now.clone().set({ hour: 15, minute: 9, second: 59 }))) {
      return;
    }
    if (settings.period === "daily_5pm" && !this.now.isBetween(this.now.clone().set({ hour: 17, minute: 0, second: 0 }), this.now.clone().set({ hour: 17, minute: 9, second: 59 }))) {
      return;
    }
    if (settings.period === "weekly_mon_9am" && (this.now.format("dd") !== "Mo" || !this.now.isBetween(this.now.clone().set({ hour: 9, minute: 0, second: 0 }), this.now.clone().set({ hour: 9, minute: 9, second: 59 })))) {
      return;
    }
    if (settings.period === "weekly_mon_5pm" && (this.now.format("dd") !== "Mo" || !this.now.isBetween(this.now.clone().set({ hour: 17, minute: 0, second: 0 }), this.now.clone().set({ hour: 17, minute: 9, second: 59 })))) {
      return;
    }
    if (settings.period === "weekly_fri_9am" && (this.now.format("dd") !== "Fr" || !this.now.isBetween(this.now.clone().set({ hour: 9, minute: 0, second: 0 }), this.now.clone().set({ hour: 9, minute: 9, second: 59 })))) {
      return;
    }
    if (settings.period === "weekly_fri_5pm" && (this.now.format("dd") !== "Fr" || !this.now.isBetween(this.now.clone().set({ hour: 17, minute: 0, second: 0 }), this.now.clone().set({ hour: 17, minute: 9, second: 59 })))) {
      return;
    }
    if (!this.inbox.getFiles().length) {
      return;
    }
    new import_obsidian4.Notice(this.getFragment());
  }
};

// src/settings/index.ts
var DEFAULT_SETTINGS = Object.freeze({
  inbox: false,
  period: "disabled"
});

// src/settings/tab.ts
var import_obsidian5 = require("obsidian");
var InboxOrganiserTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    let settings = this.plugin.getSettings();
    const periods = {
      disabled: "Disabled",
      daily_9am: "Daily at 9am",
      daily_11am: "Daily at 11am",
      daily_3pm: "Daily at 3pm",
      daily_5pm: "Daily at 5pm",
      weekly_mon_9am: "Weekly on Monday at 9am",
      weekly_mon_5pm: "Weekly on Monday at 5pm",
      weekly_fri_9am: "Weekly on Friday at 9am",
      weekly_fri_5pm: "Weekly on Friday at 5pm"
    };
    new import_obsidian5.Setting(this.containerEl).setName("Enable inbox").setDesc("Automatically move new notes in the root folder of the vault into the inbox.").addToggle((toggle) => {
      toggle.setValue(settings.inbox).onChange(async (val) => {
        settings.inbox = val;
        await this.plugin.updateSettings(settings);
      });
    });
    new import_obsidian5.Setting(this.containerEl).setName("Reminder period").setDesc("How often to send a reminder to organise your inbox.").addDropdown((dropdown) => {
      dropdown.addOptions(periods).setValue(settings.period).onChange(async (val) => {
        settings.period = val;
        await this.plugin.updateSettings(settings);
      });
    });
  }
};

// src/watcher.ts
var Watcher = class {
  constructor(plugin, fileManager) {
    this.plugin = plugin;
    this.fileManager = fileManager;
  }
  notify(file) {
    const settings = this.plugin.getSettings();
    if (settings.inbox) {
      this.fileManager.renameFile(file, `${INBOX_FOLDER}/${file.name}`);
    }
  }
};

// src/index.ts
var INBOX_FOLDER = "inbox";
var InboxOrganiser2 = class extends import_obsidian6.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.settings = DEFAULT_SETTINGS;
    this.watcher = new Watcher(this, app.fileManager);
    this.inbox = new Inbox(app.vault, app.fileManager);
    this.modal = new OrganiserModal(this.app, this.inbox);
  }
  async onload() {
    this.updateSettings = this.updateSettings.bind(this);
    await this.loadSettings();
    this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
  }
  onLayoutReady() {
    this.registerEvent(this.app.vault.on("create", (file) => {
      if (file instanceof import_obsidian6.TFile && file.path.indexOf("/") === -1) {
        this.watcher.notify(file);
      }
    }));
    this.registerInterval(window.setInterval(() => {
      new OrganiserNotice(this, this.modal, this.inbox).display();
    }, 3e5));
    new OrganiserNotice(this, this.modal, this.inbox).display();
    this.addSettingTab(new InboxOrganiserTab(this.app, this));
    this.addCommand({
      id: "inbox-organiser",
      name: "Organise inbox",
      callback: () => {
        this.modal.open();
      }
    });
  }
  getSettings() {
    return this.settings;
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async updateSettings(settings) {
    this.settings = settings;
    await this.saveData(settings);
    this.onSettingsUpdate();
  }
  onSettingsUpdate() {
    const inboxFolder = this.app.vault.getFolderByPath(INBOX_FOLDER);
    if (this.settings.inbox && !inboxFolder) {
      this.app.vault.createFolder(INBOX_FOLDER);
    }
    this.app.workspace.trigger(SETTINGS_UPDATED);
  }
};

/* nosourcemap */